record XYZ {
  x : Number,
  y : Number,
  z : Number
}

module Color.Extra {
  fun toCSSRgba (color : Color.HSVA) : String {
    "rgba(" + red + ", " + green + ", " + blue + ", " + alpha + ")"
  } where {
    rgba =
      Color.HSVA.toRGBA(color)

    red =
      Number.toString(rgba.red)

    blue =
      Number.toString(rgba.blue)

    green =
      Number.toString(rgba.green)

    alpha =
      rgba.alpha / 100
      |> Number.toString()
  }

  fun mix (by : Number, color1 : Color.HSVA, color2 : Color.HSVA) : Color.HSVA {
    {
      green = ((rgba2.green - rgba1.green) * percent) + rgba1.green,
      alpha = ((rgba2.alpha - rgba1.alpha) * percent) + rgba1.alpha,
      blue = ((rgba2.blue - rgba1.blue) * percent) + rgba1.blue,
      red = ((rgba2.red - rgba1.red) * percent) + rgba1.red
    }
    |> Color.toHSVA()
  } where {
    percent =
      Math.clamp(by, 0, 1)
      |> Debug.log()

    rgba1 =
      Color.HSVA.toRGBA(color1)

    rgba2 =
      Color.HSVA.toRGBA(color2)
  }

  fun luma (color : Color.HSVA) : Number {
    ((0.2126 * rgba.red) + (0.7152 * rgba.green) + (0.0722 * rgba.blue)) / 255
  } where {
    rgba =
      Color.HSVA.toRGBA(color)
  }

  fun dampen (by : Number, color : Color.HSVA) : Color.HSVA {
    { color | value = Math.clamp(value, 0, 100) }
  } where {
    rgba =
      Color.HSVA.toRGBA(color)

    redDiff =
      0.2126 * 255 * by

    blueDiff =
      0.0722 * 255 * by

    greenDiff =
      0.7152 * 255 * by

    red =
      if (luma(color) > 0.5) {
        color.value - diff
      } else {
        color.value + diff
      }
  }
}

store Theme2 {
  property primary : Color.HSVA = {
    saturation = 90,
    value = 85,
    alpha = 100,
    hue = 203
  }

  property base : Color.HSVA = {
    saturation = 0,
    alpha = 100,
    value = 97,
    hue = 360
  }

  property contrast : Number = 0.25
  property fontSize : Number = 16

  get background : Color.HSVA {
    base
  }

  get primaryText : Color.HSVA {
    Color.Extra.dampen(contrast * 3, primary)
  }

  get text : Color.HSVA {
    Color.Extra.dampen(contrast * 3, base)
  }

  get border : Color.HSVA {
    Color.Extra.dampen(contrast, base)
  }
}

component Main {
  connect Theme2 exposing { background, border, text, primary, primaryText }

  style base {
    background: {Color.Extra.toCSSRgba(background)};
    color: {Color.Extra.toCSSRgba(text)};
    height: 100vh;
    width: 100vw;
    padding: 20px;
  }

  style hr {
    border-top: 2px solid {Color.Extra.toCSSRgba(border)};
  }

  style button {
    background: {Color.Extra.toCSSRgba(primary)};
    color: {Color.Extra.toCSSRgba(primaryText)};
  }

  fun render : Html {
    <div::base>
      <{ "Hello" }>

      <div::button>
        <{ "What" }>
      </div>

      <div::hr/>
    </div>
  }
}
